# 
# docker-compose é usado para configurar e subir varios containers
#

# Especifica a versão do docker-compose
# Na versão 3 o depends_on só trata a ordem de criação dos containers
# Para isso utilizamos o dockerize
version: "3"
# Inicia o a matriz de serviços a serem configurados
services:

  laravel:
    # Criar a imagem com base no Dockerfile localizado no diretório local
    build: ./
    # Dá nome ao container
    container_name: laravel
    # Dockerize realiza o bind do template e verifica se a aplicação de banco de dados está funcional
    entrypoint: dockerize -template ./docker/app/env:.env -wait tcp://db:3306 -timeout 40s ./entrypoint.sh
    # Mapeia as variáveis para serem usadas no template
    environment:
      - DB_HOST=db
      - DB_DATABASE=laravel
      - DB_USERNAME=root
      - DB_PASSWORD=root
    # Mapeia o diretório local (.) no diretório /var/www do container
    volumes: 
      - .:/var/www
    # Coloca o container na networkk
    networks: 
      - laravel-network
    # Informa que o serviço depende dos containers db e redis
    depends_on:
      - db
      - redis

  # Serviço nginx
  nginx:
    # Cria a imagem com base no Dockerfile localizado no diretorio informado
    build: ./docker/nginx
    # Da nome ao container
    container_name: nginx
     # Habilita o reinicio automatico 
    restart: always
    # Configura o dockerize como entrypoint da aplicação
    # Dockerize testa se a aplicação de banco de dados está funcional
    entrypoint: dockerize -template ./var/www/docker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf -wait tcp://laravel:9000  -timeout 40s nginx -g "daemon off;"
    # Mapeia as variáveis para serem usadas no template
    environment:
      - REDIRECT_HOST=laravel
      - NGINX_PORT=9000
    # Habilita a conexão bash
    tty: true
    # Expõe a porta 8080 e redireciona para a porta 80 do container
    ports:
      - "8000:80"
    # Coloca o container na rede
    networks: 
      - laravel-network
    # Mapeia o diretório local . no diretório /var/www do container
    volumes:
      - .:/var/www
    # Informa que o container em questão depende que o container laravel tenha subido
    depends_on:
      - laravel
      
  db:
    # Utiliza a imagem do mysql 5.7 como base do container
    image: mysql:5.7
    # Configura o innodb para não utilizar o async IO
    command: --innodb-use-native-aio=0
    # Define o nome do container
    container_name: db
    # Habilita o reinicio automático do container
    restart: always
    # Habilita o bash do container
    tty: true
    # Expõe aporta 3306 e redireciona para a porta 3306 do container
    ports:
      - "3306:3306"
    # Realiza o mapeamento do diretório ./v
    volumes:
    - ./mysql/data:/var/lib/mysql
    # Definindo as varíaveis de ambiente
    environment:
      - MYSQL_DATABASE=laravel
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=root 
    # Coloca o container na rede
    networks: 
      - laravel-network

  # Serviço redis
  redis:
    # Cria com base na imagem
    image: redis:alpine
    # Expondo a porte
    expose:
      - 6379
    # Coloca o container na rede
    networks:
      - laravel-network
# Cria a rede onde os serviços ficarão localizados
networks:
  # Dando nome a rede
  laravel-network:
    # Configurando o driver da rede
    driver: bridge

